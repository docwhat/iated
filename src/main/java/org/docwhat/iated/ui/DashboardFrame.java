/*
 */

/*
 * DashboardFrame.java
 *
 * Created on Jan 17, 2011, 8:07:50 AM
 */
package org.docwhat.iated.ui;

import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.docwhat.iated.AppState;
import org.docwhat.iated.rest.Edit;
import org.simplericity.macify.eawt.Application;
import org.simplericity.macify.eawt.ApplicationEvent;
import org.simplericity.macify.eawt.ApplicationListener;
import org.simplericity.macify.eawt.DefaultApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jhurne, docwhat
 */
public class DashboardFrame extends javax.swing.JFrame implements ApplicationListener {
    private static final Logger logger = LoggerFactory.getLogger(DashboardFrame.class);

    private AppState state;
    private Application application;

    public static void main(String[] args) {
        Application application = new DefaultApplication();
        useSwingSystemLookAndFeel();
        DashboardFrame dashboard = new DashboardFrame();
        dashboard.setApplication(application);
        dashboard.init();
    }

    private void setApplication(Application application) {
        this.application = application;
    }

    /* Initialize the Dashboard */
    private void init() {
        /* Get the application set up (macify). */
        application.addApplicationListener(this);
        application.addPreferencesMenuItem();
        application.setEnabledPreferencesMenu(true);

        /* Get the app state. */
        state = AppState.INSTANCE;

        /* Set the app state to start. */
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                // Set up the state.
                state = AppState.INSTANCE;

                // Start the server.
                state.startServer();

                // Show the dashboard.
                setVisible(true);
            }
        });

        /* Initialize the UI parts. */
        initComponents();

        /* Update the display to set initial values. */
        updateDisplay();
    }

    private void updateDisplay() {
        activePortField.setText(String.valueOf(state.getActivePort()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preferencesButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        activePortField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        preferencesButton.setText("Preferences");
        preferencesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Port:");

        activePortField.setColumns(5);
        activePortField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activePortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 397, Short.MAX_VALUE)
                .addComponent(preferencesButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preferencesButton)
                    .addComponent(jLabel1)
                    .addComponent(activePortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(369, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesButtonActionPerformed
        showPreferences();
    }//GEN-LAST:event_preferencesButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        state.stopServer();
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activePortField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton preferencesButton;
    // End of variables declaration//GEN-END:variables

    private void showPreferences() {
        PreferencesDialog dialog = new PreferencesDialog(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
        updateDisplay();
    }

    @Override
    public void handleAbout(ApplicationEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void handleOpenApplication(ApplicationEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void handleOpenFile(ApplicationEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void handlePreferences(ApplicationEvent ae) {
        showPreferences();
    }

    @Override
    public void handlePrintFile(ApplicationEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void handleQuit(ApplicationEvent ae) {
        handleQuit();
    }

    public void handleQuit() {
        state.stopServer();
        logger.info("Goodbye!");
        System.exit(0);
    }

    @Override
    public void handleReOpenApplication(ApplicationEvent ae) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Set the Swing look-and-feel to the System look-and-feel. The System look
     * and feel ensures that Swing windows closely match the native OS windows.
     */
    private static void useSwingSystemLookAndFeel() {
        try {
            // Use the System (native) look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        }
        catch (UnsupportedLookAndFeelException e) {
            logger.warn("Unable to set the Swing Look and Feel. "
                    + "The default look and feel will be used instead.", e);
        }
        catch (ClassNotFoundException e) {
            logger.warn("Unable to set the Swing Look and Feel. "
                    + "The default look and feel will be used instead.", e);
        }
        catch (InstantiationException e) {
            logger.warn("Unable to set the Swing Look and Feel. "
                    + "The default look and feel will be used instead.", e);
        }
        catch (IllegalAccessException e) {
            logger.warn("Unable to set the Swing Look and Feel. "
                    + "The default look and feel will be used instead.", e);
        }
    }
}
