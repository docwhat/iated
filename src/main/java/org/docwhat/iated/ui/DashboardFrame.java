/*
 */

/*
 * DashboardFrame.java
 *
 * Created on Jan 17, 2011, 8:07:50 AM
 */

package org.docwhat.iated.ui;

import java.io.IOException;
//import java.util.logging.Level;
//import java.util.logging.Logger;

import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.docwhat.iated.AppState;

/**
 *
 * @author jhurne
 */
public class DashboardFrame extends javax.swing.JFrame {

    private AppState state;

    /** Creates new form DashboardFrame */
    public DashboardFrame() {
        initComponents();

        state = new AppState();
        state.startServer();

        updateDisplay();
    }

    private void updateDisplay() {
        activePortField.setText(String.valueOf(state.getActivePort()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preferencesButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        activePortField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        preferencesButton.setText("Preferences");
        preferencesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Port:");

        activePortField.setColumns(5);
        activePortField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(572, Short.MAX_VALUE)
                .addComponent(preferencesButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activePortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(543, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preferencesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(activePortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(336, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesButtonActionPerformed
        PreferencesDialog dialog = new PreferencesDialog(new javax.swing.JFrame(), true, state);
        dialog.setVisible(true);
        updateDisplay();
    }//GEN-LAST:event_preferencesButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        state.stopServer();
    }//GEN-LAST:event_formWindowClosing

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws IOException {
        useSwingSystemLookAndFeel();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new DashboardFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activePortField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton preferencesButton;
    // End of variables declaration//GEN-END:variables


	/**
	 * Set the Swing look-and-feel to the System look-and-feel. The System look
	 * and feel ensures that Swing windows closely match the native OS windows.
	 */
	private static void useSwingSystemLookAndFeel() {
		try {
			// Use the System (native) look and feel
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

		} catch (UnsupportedLookAndFeelException e) {
			System.err.println("Unable to set the Swing Look and Feel. "
					+ "The default look and feel will be used instead.");
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			System.err.println("Unable to set the Swing Look and Feel. "
					+ "The default look and feel will be used instead.");
			e.printStackTrace();
		} catch (InstantiationException e) {
			System.err.println("Unable to set the Swing Look and Feel. "
					+ "The default look and feel will be used instead.");
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			System.err.println("Unable to set the Swing Look and Feel. "
					+ "The default look and feel will be used instead.");
			e.printStackTrace();
		}
	}
}
